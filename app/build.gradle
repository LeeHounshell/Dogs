apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.harlie.dogs"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures{
        dataBinding = true
        // for view binding:
        // viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
// FIXME: Test framework quit unexpectedly
//      execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude("META-INF/*.kotlin_module")
    }
}

def kotlin_version = '1.3.72'
def multidex_version = '2.0.1'
def appCompat_version = '1.1.0'
def ktx_version = '1.3.0'
def constraint_version = '1.1.3'
def recycler_version = '1.2.0-alpha04'
def lifecycle_version = '2.2.0'
def room_version = '2.2.5'
def legacySupport_version = '1.0.0'
def coroutines_version = '1.3.7'
def nav_version = '2.2.2'
def material_version = '1.1.0'
def retrofit_version = '2.9.0'
def rxJava_version = '2.2.19'
def rxAndroid_version = '2.1.1'
def rxRetrofit_version = '2.9.0'
def glide_version = '4.11.0'
def palette_version = '1.0.0'
def preferences_version = '1.1.1'
def timberkt_version = '1.5.1'
def greenrobot_version = '3.2.0'
def antlr_version = '4.7.1'
def junit_version = '4.13'
def junitTest_version = '1.2.0'
def espresso_version = '3.2.0'
def mockk_version = '1.9.3'
def livedataTest_version = '1.1.2'
def okhttp_version = '4.7.2'
def robolectric_version = '4.2.1'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appCompat_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"
    implementation "androidx.recyclerview:recyclerview:$recycler_version"

    // Multidex
    implementation "androidx.multidex:multidex:$multidex_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.legacy:legacy-support-v4:$legacySupport_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Navigation
    implementation "android.arch.navigation:navigation-common-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-runtime-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rxJava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroid_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rxRetrofit_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "androidx.palette:palette:$palette_version"

    // Misc
    implementation "androidx.legacy:legacy-support-v4:$legacySupport_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.preference:preference:$preferences_version"
    implementation "com.github.ajalt:timberkt:$timberkt_version"
    implementation "org.greenrobot:eventbus:$greenrobot_version"

    // Unit Tests - MockK
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "com.jraska.livedata:testing-ktx:$livedataTest_version"

    // Unit Tests - Robolectric
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "androidx.test:core:$junitTest_version"

    // Instrumented Tests - espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test:rules:$junitTest_version"

    // Instrumented Tests - MockK
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation "androidx.test:runner:$junitTest_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "com.jraska.livedata:testing-ktx:$livedataTest_version"

// FIXME: Test framework quit unexpectedly
//  androidTestUtil "androidx.test:orchestrator:$junitTest_version"

    // Mock Test Web Server
    testImplementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
}

configurations.all {
    resolutionStrategy {
        force("org.antlr:antlr4-runtime:$antlr_version")
        force("org.antlr:antlr4-tool:$antlr_version")
    }
}

